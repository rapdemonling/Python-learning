# __author__ = "George Ling"
#
# 面向对象介绍
#
# Class 类
# 一个类即是对一类拥有相同属性的对象的抽象、蓝图、原型。在类中定义了这些对象的都具备的属性（variables(data)）、共同的方法
#
# Object 对象
# 一个对象即是一个类的实例化后实例，一个类必须经过实例化后方可在程序中调用，一个类可以实例化多个对象，每个对象亦可以有不同的属性，就像人类是指所有人，每个人是指具体的对象，人与人之前有共性，亦有不同
#
# Encapsulation 封装
# 在类中对数据的赋值、内部调用对外部用户是透明的，这使类变成了一个胶囊或容器，里面包含着类的数据和方法
#
# Inheritance 继承
# 一个类可以派生出子类，在这个父类里定义的属性、方法自动被子类继承
#
# Polymorphism 多态
# 多态是面向对象的重要特性,简单点说:“一个接口，多种实现”，指一个基类中派生出了不同的子类，且每个子类在继承了同样的方法名的同时又对父类的方法做了不同的实现，这就是同一种事物表现出的多种形态。
# 编程其实就是一个将具体世界进行抽象化的过程，多态就是抽象化的一种体现，把一系列具体事物的共同点抽象出来, 再通过这个抽象的事物, 与不同的具体事物进行对话。
# 对不同类的对象发出相同的消息将会有不同的行为。比如，你的老板让所有员工在九点钟开始工作, 他只要在九点钟的时候说：“开始工作”即可，而不需要对销售人员说：“开始销售工作”，对技术人员说：“开始技术工作”, 因为“员工”是一个抽象的事物, 只要是员工就可以开始工作，他知道这一点就行了。至于每个员工，当然会各司其职，做各自的工作。
# 多态允许将子类的对象当作父类的对象使用，某父类型的引用指向其子类型的对象,调用的方法是该子类型的方法。这里引用和调用方法的代码编译前就已经决定了,而引用所指向的对象可以在运行期间动态绑定
# #
#
#
#
#
# 特性
# class
# object
#
# 封装
# 继承
# 多态
#
# 语法
#
# 调用函数  --》 执行 --》返回结果
#
# r1 = Role.__init__() return x342423
#
# r1 = Role(r1,"Alex","Police","15000")
# r1.name = "Alex"
# r1.role = "Poice"
# r1.money = 15000
# r1.buy_gun() # Role.buy_gun(r1)
#


# 属性
# 方法
# 类变量的用途? 大家共用的属性 ,节省开销
# class Person:
#     cn = "中国"
#     def __init__(self,name,age,addr,cn="china")
#         self.name = name
#         self.cn = cn
# p1 = Person(name,age ,addr)
# #
# 构造函数

析构函数： 在实例释放、销毁的时候自动执行的，通常用于做一些收尾工作， 如关闭一些数据库连接，关闭打开的临时文件

# 私有方法，私有属性
#
# 类变量
# 实例变量


# 封装

继承
py2 经典类是按深度优先来继承的，新式类是按广度优先来继承的
py3 经典类和新式类都是统一按广度优先来继承的

多态
一种接口，多种实现

